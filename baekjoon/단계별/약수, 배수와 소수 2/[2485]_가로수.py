# ------------------------------------------------------
# 문제 번호 : [2485] 가로수
# 플랫폼 : Baekjoon
# 링크 : https://www.acmicpc.net/problem/2485
# 난이도 : X
# 분류 : 수학, 정수론, 유클리드 호제법
# 날짜 : 2024-11-05
# ------------------------------------------------------

# 유클리드 호제법(Euclidean algorithm)은 2개의 자연수 또는 정식의 최대공약수를 구하는 알고리즘의 하나이다.
# 호제법이란 말은 두 수가 서로 상대방 수를 나누어 결국 원하는 수를 얻는 알고리즘을 나타낸다.
# 2개의 자연수 a, b에 대해서 a를 b로 나눈 나머지를 r이라 하면(단, a>b), a와 b의 최대공약수는 b와 r의 최대공약수와 같다. 
# 이 성질에 따라, b를 r로 나눈 나머지 r'를 구하고, 다시 r을 r'로 나눈 나머지를 구하는 과정을 반복하여 
# 나머지가 0이 되었을 때 나누는 수가 a와 b의 최대공약수이다.

# 문제 설명 :
# 직선으로 되어있는 도로의 한 편에 가로수가 임의의 간격으로 심어져있다. 
# KOI 시에서는 가로수들이 모두 같은 간격이 되도록 가로수를 추가로 심는 사업을 추진하고 있다. 
# KOI 시에서는 예산문제로 가능한 한 가장 적은 수의 나무를 심고 싶다.
#
# 심어져 있는 가로수의 위치가 주어질 때, 
# 모든 가로수가 같은 간격이 되도록 새로 심어야 하는 가로수의 최소수를 구하는 프로그램을 작성하라. 
# 단, 추가되는 나무는 기존의 나무들 사이에만 심을 수 있다.

# 코드
import sys
import math

N = int(input())
diff = [int(input())]

for i in range(N-1):
    n = int(sys.stdin.readline().strip())
    diff[i] = n - diff[i]
    diff.append(n)
diff.pop()

gcd = math.gcd(diff[0], diff[1])

for d in diff : gcd = math.gcd(gcd, d)

print(f"{sum(diff)//gcd-len(diff)}")
